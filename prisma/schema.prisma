generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Roles
//
enum Role {
  GUEST
  HOST
  ADMIN
}

//
// Users (guests & hosts)
//
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(GUEST)
  createdAt      DateTime  @default(now())

  // Relationships
  venues      Venue[]   @relation("HostVenues")
  bookings    Booking[]
  favoriteIds String[] // simple array for "favorites"

  // Auth.js
  accounts Account[]
  sessions Session[]
}

//
// Venues (event spaces you can book)
//
model Venue {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  city           String
  capacity       Int
  basePriceCents Int
  description    String
  ratings        Int
  amenities      String[] // Postgres text[]
  image          String
  images         String[] // gallery of images
  category       String? // optional (e.g. Garden, Rooftop, Hall)
  createdAt      DateTime @default(now())

  // Host (the owner of the venue)
  hostId String?
  host   User?   @relation("HostVenues", fields: [hostId], references: [id])

  // Bookings (reservations for events)
  bookings Booking[]
}

//
// Bookings (reservations)
//
model Booking {
  id         String   @id @default(cuid())
  venueId    String
  userId     String?
  from       DateTime
  to         DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  // Relationships
  venue Venue @relation(fields: [venueId], references: [id])
  user  User? @relation(fields: [userId], references: [id])
}

//
// Auth.js (NextAuth adapter models)
//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
